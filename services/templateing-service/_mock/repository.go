// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hingew/hsfl-master-ai-cloud-engineering/templateing-service/templates/repository (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_

import (
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
        model "github.com/hingew/hsfl-master-ai-cloud-engineering/templateing-service/templates/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
        ctrl     *gomock.Controller
        recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
        mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
        mock := &MockRepository{ctrl: ctrl}
        mock.recorder = &MockRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
        return m.recorder
}

// CreateTemplate mocks base method.
func (m *MockRepository) CreateTemplate(arg0 model.PdfTemplate) (*uint, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateTemplate", arg0)
        ret0, _ := ret[0].(*uint)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate.
func (mr *MockRepositoryMockRecorder) CreateTemplate(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockRepository)(nil).CreateTemplate), arg0)
}

// DeleteTemplate mocks base method.
func (m *MockRepository) DeleteTemplate(arg0 uint) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteTemplate", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate.
func (mr *MockRepositoryMockRecorder) DeleteTemplate(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockRepository)(nil).DeleteTemplate), arg0)
}

// GetAllTemplates mocks base method.
func (m *MockRepository) GetAllTemplates() (*[]model.PdfTemplate, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetAllTemplates")
        ret0, _ := ret[0].(*[]model.PdfTemplate)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetAllTemplates indicates an expected call of GetAllTemplates.
func (mr *MockRepositoryMockRecorder) GetAllTemplates() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTemplates", reflect.TypeOf((*MockRepository)(nil).GetAllTemplates))
}

// GetTemplateById mocks base method.
func (m *MockRepository) GetTemplateById(arg0 uint) (*model.PdfTemplate, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetTemplateById", arg0)
        ret0, _ := ret[0].(*model.PdfTemplate)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetTemplateById indicates an expected call of GetTemplateById.
func (mr *MockRepositoryMockRecorder) GetTemplateById(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateById", reflect.TypeOf((*MockRepository)(nil).GetTemplateById), arg0)
}

// UpdateTemplate mocks base method.
func (m *MockRepository) UpdateTemplate(arg0 uint, arg1 model.PdfTemplate) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateTemplate", arg0, arg1)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateTemplate indicates an expected call of UpdateTemplate.
func (mr *MockRepositoryMockRecorder) UpdateTemplate(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockRepository)(nil).UpdateTemplate), arg0, arg1)
}