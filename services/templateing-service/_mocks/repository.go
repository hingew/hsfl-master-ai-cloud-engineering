// Code generated by MockGen. DO NOT EDIT.
// Source: templates/repository/repository_interface.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=_mocks/repository.go -source=templates/repository/repository_interface.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/hingew/hsfl-master-ai-cloud-engineering/templating-service/templates/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CreateTemplate mocks base method.
func (m *MockIRepository) CreateTemplate(data model.PdfTemplate) (*uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", data)
	ret0, _ := ret[0].(*uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate.
func (mr *MockIRepositoryMockRecorder) CreateTemplate(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockIRepository)(nil).CreateTemplate), data)
}

// DeleteTemplate mocks base method.
func (m *MockIRepository) DeleteTemplate(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate.
func (mr *MockIRepositoryMockRecorder) DeleteTemplate(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockIRepository)(nil).DeleteTemplate), id)
}

// GetAllTemplates mocks base method.
func (m *MockIRepository) GetAllTemplates() ([]*model.PdfTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTemplates")
	ret0, _ := ret[0].([]*model.PdfTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTemplates indicates an expected call of GetAllTemplates.
func (mr *MockIRepositoryMockRecorder) GetAllTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTemplates", reflect.TypeOf((*MockIRepository)(nil).GetAllTemplates))
}

// GetTemplateById mocks base method.
func (m *MockIRepository) GetTemplateById(id uint) (*model.PdfTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateById", id)
	ret0, _ := ret[0].(*model.PdfTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateById indicates an expected call of GetTemplateById.
func (mr *MockIRepositoryMockRecorder) GetTemplateById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateById", reflect.TypeOf((*MockIRepository)(nil).GetTemplateById), id)
}

// UpdateTemplate mocks base method.
func (m *MockIRepository) UpdateTemplate(id uint, data model.PdfTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplate", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTemplate indicates an expected call of UpdateTemplate.
func (mr *MockIRepositoryMockRecorder) UpdateTemplate(id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockIRepository)(nil).UpdateTemplate), id, data)
}
