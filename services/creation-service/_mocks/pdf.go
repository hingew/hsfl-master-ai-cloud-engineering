// Code generated by MockGen. DO NOT EDIT.
// Source: pdf/pdf.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=pdf/pdf.go -destination=_mocks/pdf.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	reflect "reflect"

	model "github.com/hingew/hsfl-master-ai-cloud-engineering/lib/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPdf is a mock of Pdf interface.
type MockPdf struct {
	ctrl     *gomock.Controller
	recorder *MockPdfMockRecorder
}

// MockPdfMockRecorder is the mock recorder for MockPdf.
type MockPdfMockRecorder struct {
	mock *MockPdf
}

// NewMockPdf creates a new mock instance.
func NewMockPdf(ctrl *gomock.Controller) *MockPdf {
	mock := &MockPdf{ctrl: ctrl}
	mock.recorder = &MockPdfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPdf) EXPECT() *MockPdfMockRecorder {
	return m.recorder
}

// Out mocks base method.
func (m *MockPdf) Out() (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Out")
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Out indicates an expected call of Out.
func (mr *MockPdfMockRecorder) Out() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Out", reflect.TypeOf((*MockPdf)(nil).Out))
}

// Render mocks base method.
func (m *MockPdf) Render(arg0 *model.PdfTemplate, arg1 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render", arg0, arg1)
}

// Render indicates an expected call of Render.
func (mr *MockPdfMockRecorder) Render(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockPdf)(nil).Render), arg0, arg1)
}
