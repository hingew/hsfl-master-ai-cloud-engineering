// Code generated by MockGen. DO NOT EDIT.
// Source: client/templating_service_client.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=_mocks/templating_service_client.go -source=client/templating_service_client.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/hingew/hsfl-master-ai-cloud-engineering/lib/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplatingServiceClient is a mock of TemplatingServiceClient interface.
type MockTemplatingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTemplatingServiceClientMockRecorder
}

// MockTemplatingServiceClientMockRecorder is the mock recorder for MockTemplatingServiceClient.
type MockTemplatingServiceClientMockRecorder struct {
	mock *MockTemplatingServiceClient
}

// NewMockTemplatingServiceClient creates a new mock instance.
func NewMockTemplatingServiceClient(ctrl *gomock.Controller) *MockTemplatingServiceClient {
	mock := &MockTemplatingServiceClient{ctrl: ctrl}
	mock.recorder = &MockTemplatingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplatingServiceClient) EXPECT() *MockTemplatingServiceClientMockRecorder {
	return m.recorder
}

// GetTemplate mocks base method.
func (m *MockTemplatingServiceClient) GetTemplate(templateID uint) (*model.PdfTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", templateID)
	ret0, _ := ret[0].(*model.PdfTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockTemplatingServiceClientMockRecorder) GetTemplate(templateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockTemplatingServiceClient)(nil).GetTemplate), templateID)
}
