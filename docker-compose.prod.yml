version: '3.9'

services:
  reverse_proxy:
    build:
      context: ./ 
      dockerfile: ./services/api-gateway/Dockerfile
    ports:
      - 3000:3000
    environment:
      - WEB_ENDPOINT=http://web:3000
      - TEMPLATE_ENDPOINT=http://templates:3000
      - CREATION_ENDPOINT=http://creation:3000
      - USER_ENDPOINT=http://user:3000
    volumes:
      - ./services/api-gateway/config.yml:/app/config.yml
    depends_on:
      - web
      - orchestrated-templateing-service
      - creation
  
  web:
    build:
      context: ./ 
      dockerfile: ./services/web-service/Dockerfile
    ports:
      - 3001:3000
    environment:
      - TEMPLATE_ENDPOINT=templates:3000
    links:
      - orchestrated-templateing-service
    
  orchestrated-templateing-service:
    build: 
      context: ./
      dockerfile: ./services/orchestrator/Dockerfile
    ports:
      - 3004:3000
    environment:
      - BALANCER_ALGORITHM=RoundRobin
      - DOCKER_IMAGE=hauing/templateing-service:develop

  creation:
    build: 
      context: ./
      dockerfile: ./services/creation-service/Dockerfile
    volumes:
      - ./services/creation-service/config.yml:/app/config.yml
    ports:
      - 3003:3000
    links:
      - orchestrated-templateing-service

  postgres:
    image: postgres:15-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./services/templateing-service/sql:/docker-entrypoint-initdb.d
