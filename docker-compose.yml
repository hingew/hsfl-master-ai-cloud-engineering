version: '3.9'

services:
  reverse_proxy:
    build:
      context: ./ 
      dockerfile: ./services/api-gateway/Dockerfile
    ports:
      - 3000:3000
    environment:
      - WEB_ENDPOINT=$WEB_ENDPOINT
      - TEMPLATE_ENDPOINT=$TEMPLATE_ENDPOINT
      - CREATION_ENDPOINT=$CREATION_ENDPOINT
      - USER_ENDPOINT=$USER_ENDPOINT
      - WEB_ROUTES=$WEB_ROUTES
      - TEMPLATE_ROUTES=$TEMPLATE_ROUTES
      - CREATION_ROUTES=$CREATION_ROUTES
      - USER_ROUTES=$USER_ROUTES
    depends_on:
      - web
      - templates
      - creation
  
  web:
    build:
      context: ./ 
      dockerfile: ./services/web-service/Dockerfile
    ports:
      - 3001:3000
    links:
      - templates
    
  templates:
    build:
      context: ./
      dockerfile: ./services/templateing-service/Dockerfile
    ports:
      - 3002:3000
      - 3010:3001
    environment:
      - USE_TESTDATA=$USE_TESTDATA
      - POSTGRES_HOST=$POSTGRES_HOST
      - POSTGRES_PORT=$POSTGRES_PORT
      - POSTGRES_USERNAME=$POSTGRES_USERNAME
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DBNAME=$POSTGRES_DBNAME
    volumes:
      - ./services/templateing-service/test_data.json:/app/test_data.json
    depends_on:
      postgres:
        condition: service_healthy
  
  creation:
    build: 
      context: ./
      dockerfile: ./services/creation-service/Dockerfile
    environment:
      - TEMPLATE_GRPC_ENDPOINT=$TEMPLATE_GRPC_ENDPOINT
    ports:
      - 3003:3000
    links:
      - templates
    depends_on:
      - templates

  user:
    build:
      context: ./
      dockerfile: ./services/user-service/Dockerfile
    ports:
      - 3004:3000
    environment:
      - USE_TESTDATA=$USE_TESTDATA
      - POSTGRES_HOST=$POSTGRES_HOST
      - POSTGRES_PORT=$POSTGRES_PORT
      - POSTGRES_USERNAME=$POSTGRES_USERNAME
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DBNAME=$POSTGRES_DBNAME
      - AUTH_SIGN_KEY=$AUTH_SIGN_KEY
      - PORT=3000
    volumes:
      - ./services/templateing-service/test_data.json:/app/test_data.json
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:15-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_DB=$POSTGRES_DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./.docker/postgres:/docker-entrypoint-initdb.d
