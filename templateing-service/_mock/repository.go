// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hingew/hsfl-master-ai-cloud-engineering/templating-service/api/repository (interfaces: IRepository)

// Package mock_repository is a generated GoMock package.
package mock_

import (
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
        model "github.com/hingew/hsfl-master-ai-cloud-engineering/templating-service/templates/model"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
        ctrl     *gomock.Controller
        recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
        mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
        mock := &MockIRepository{ctrl: ctrl}
        mock.recorder = &MockIRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
        return m.recorder
}

// CreateTemplate mocks base method.
func (m *MockIRepository) CreateTemplate(arg0 *model.PdfTemplate) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateTemplate", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// CreateTemplate indicates an expected call of CreateTemplate.
func (mr *MockIRepositoryMockRecorder) CreateTemplate(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockIRepository)(nil).CreateTemplate), arg0)
}

// DeleteTemplate mocks base method.
func (m *MockIRepository) DeleteTemplate(arg0 int64) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteTemplate", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate.
func (mr *MockIRepositoryMockRecorder) DeleteTemplate(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockIRepository)(nil).DeleteTemplate), arg0)
}

// GetAllTemplates mocks base method.
func (m *MockIRepository) GetAllTemplates() ([]*model.PdfTemplate, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetAllTemplates")
        ret0, _ := ret[0].([]*model.PdfTemplate)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetAllTemplates indicates an expected call of GetAllTemplates.
func (mr *MockIRepositoryMockRecorder) GetAllTemplates() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTemplates", reflect.TypeOf((*MockIRepository)(nil).GetAllTemplates))
}

// GetTemplate mocks base method.
func (m *MockIRepository) GetTemplate(arg0 int64) (*model.PdfTemplate, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetTemplate", arg0)
        ret0, _ := ret[0].(*model.PdfTemplate)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockIRepositoryMockRecorder) GetTemplate(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockIRepository)(nil).GetTemplate), arg0)
}

// UpdateTemplate mocks base method.
func (m *MockIRepository) UpdateTemplate(arg0 int64, arg1 *model.PdfTemplate) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateTemplate", arg0, arg1)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateTemplate indicates an expected call of UpdateTemplate.
func (mr *MockIRepositoryMockRecorder) UpdateTemplate(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockIRepository)(nil).UpdateTemplate), arg0, arg1)
}