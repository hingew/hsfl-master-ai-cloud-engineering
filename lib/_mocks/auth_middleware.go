// Code generated by MockGen. DO NOT EDIT.
// Source: middleware/auth_middleware.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=_mocks/auth_middleware.go -source=middleware/auth_middleware.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	router "github.com/hingew/hsfl-master-ai-cloud-engineering/lib/router"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthMiddleInterface is a mock of AuthMiddleInterface interface.
type MockAuthMiddleInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMiddleInterfaceMockRecorder
}

// MockAuthMiddleInterfaceMockRecorder is the mock recorder for MockAuthMiddleInterface.
type MockAuthMiddleInterfaceMockRecorder struct {
	mock *MockAuthMiddleInterface
}

// NewMockAuthMiddleInterface creates a new mock instance.
func NewMockAuthMiddleInterface(ctrl *gomock.Controller) *MockAuthMiddleInterface {
	mock := &MockAuthMiddleInterface{ctrl: ctrl}
	mock.recorder = &MockAuthMiddleInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMiddleInterface) EXPECT() *MockAuthMiddleInterfaceMockRecorder {
	return m.recorder
}

// AuthMiddleware mocks base method.
func (m *MockAuthMiddleInterface) AuthMiddleware(arg0 http.ResponseWriter, arg1 *http.Request, arg2 router.Next) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuthMiddleware", arg0, arg1, arg2)
}

// AuthMiddleware indicates an expected call of AuthMiddleware.
func (mr *MockAuthMiddleInterfaceMockRecorder) AuthMiddleware(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthMiddleware", reflect.TypeOf((*MockAuthMiddleInterface)(nil).AuthMiddleware), arg0, arg1, arg2)
}
